Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.terraform_remote_state.foundation: Refreshing state...
aws_security_group.web: Refreshing state... (ID: sg-0fa2e45b32eb29338)
aws_security_group_rule.public_allow_ingress_http: Refreshing state... (ID: sgrule-3587669054)
aws_security_group_rule.public_allow_ingress_ssh: Refreshing state... (ID: sgrule-1667047819)
aws_security_group_rule.allow_egress_alltraffi: Refreshing state... (ID: sgrule-2446674545)

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + aws_security_group.web
      id:                       <computed>
      arn:                      <computed>
      description:              "Security group for web server"
      egress.#:                 <computed>
      ingress.#:                <computed>
      name:                     "sg_devops"
      owner_id:                 <computed>
      revoke_rules_on_delete:   "false"
      tags.%:                   "1"
      tags.Name:                "sg_devops"
      vpc_id:                   "vpc-0d615e7a53af272a3"

  + aws_security_group_rule.allow_egress_alltraffi
      id:                       <computed>
      cidr_blocks.#:            "1"
      cidr_blocks.0:            "0.0.0.0/0"
      from_port:                "0"
      protocol:                 "-1"
      security_group_id:        "${aws_security_group.web.id}"
      self:                     "false"
      source_security_group_id: <computed>
      to_port:                  "0"
      type:                     "egress"

  + aws_security_group_rule.public_allow_ingress_http
      id:                       <computed>
      cidr_blocks.#:            "1"
      cidr_blocks.0:            "0.0.0.0/0"
      from_port:                "80"
      protocol:                 "tcp"
      security_group_id:        "${aws_security_group.web.id}"
      self:                     "false"
      source_security_group_id: <computed>
      to_port:                  "80"
      type:                     "ingress"

  + aws_security_group_rule.public_allow_ingress_ssh
      id:                       <computed>
      cidr_blocks.#:            "1"
      cidr_blocks.0:            "0.0.0.0/0"
      from_port:                "22"
      protocol:                 "tcp"
      security_group_id:        "${aws_security_group.web.id}"
      self:                     "false"
      source_security_group_id: <computed>
      to_port:                  "22"
      type:                     "ingress"


Plan: 4 to add, 0 to change, 0 to destroy.

